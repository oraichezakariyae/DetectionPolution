#include <WiFi.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <EEPROM.h>
#include <WebServer.h>
#include <LiquidCrystal_I2C.h>
#include <ArduinoJson.h>

// Configuration des broches
#define ONE_WIRE_BUS 4       // DS18B20
#define TDS_PIN 34           // Capteur TDS
#define TURBIDITY_PIN 35     // Capteur Turbidité

// Configuration WiFi
const char* ssid = "ADOC 4G";
const char* password = "0102030405";

// Configuration Gmail (SMTP)
#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 465
#define AUTHOR_EMAIL "votre.email@gmail.com"
#define AUTHOR_PASSWORD "votre_mdp_app"  // Mot de passe d'application
#define RECIPIENT_EMAIL "destinataire@example.com"

// Seuils de qualité
const int TDS_CLEAN = 300;      // < 300ppm = Eau propre
const int TDS_CLOUDY = 600;     // 300-600ppm = Eau trouble
const int TURB_CLEAN = 1000;    // < 1000 NTU = Eau propre
const int TURB_CLOUDY = 2000;   // 1000-2000 NTU = Eau trouble

// Objets globaux
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
LiquidCrystal_I2C lcd(0x27, 20, 4);  // Adresse I2C 0x27
WebServer server(80);
SMTPSession smtp;

// Structure de données
struct SensorData {
  uint32_t timestamp;
  float temperature;
  int tds;
  int turbidity;
  bool isPolluted;
};

// Variables globales
SensorData currentData;
unsigned long lastSensorRead = 0;
unsigned long lastDataSave = 0;
unsigned long lastEmailSent = 0;
const unsigned long SENSOR_INTERVAL = 5000;    // 5 sec
const unsigned long SAVE_INTERVAL = 3600000;   // 1 heure
const unsigned long EMAIL_COOLDOWN = 86400000; // 24 heures

// Prototypes
void initWiFi();
void initSensors();
void initWebServer();
void readSensors();
void evaluateWaterQuality();
void sendEmailAlert();
void saveToEEPROM();
void handleRoot();
void handleData();
void handleHistory();
void handleNotFound();
void updateLCD();

// HTML de l'interface web (simplifié ici, à compléter)
const char indexHTML[] PROGMEM = R"rawliteral(

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Surveillance Qualité de l'Eau</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f0f8ff;
            margin: 0;
            padding: 20px;
            color: #333;
        }
        .dashboard {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }
        h1 {
            text-align: center;
            color: #0066cc;
        }
        .status-card {
            background: #e6f7ff;
            border-left: 5px solid #0066cc;
            padding: 15px;
            margin: 15px 0;
            border-radius: 8px;
        }
        .alert {
            background: #ffebee;
            border-left: 5px solid #f44336;
            color: #d32f2f;
        }
        .sensor-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin: 20px 0;
        }
        .sensor-card {
            background: white;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        .sensor-value {
            font-size: 2.5em;
            font-weight: bold;
            margin: 10px 0;
            color: #0066cc;
        }
        .sensor-unit {
            color: #666;
        }
        .chart-container {
            height: 300px;
            margin: 30px 0;
        }
        button {
            background: #0066cc;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            margin: 5px;
        }
        button:hover {
            background: #0052a3;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #0066cc;
            color: white;
        }
        tr:hover {
            background-color: #f5f5f5;
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <h1>🌊 Surveillance de la Qualité de l'Eau</h1>
        
        <div id="status" class="status-card">
            <h2>État actuel: <span id="water-status">Analyse en cours...</span></h2>
            <p id="status-message"></p>
        </div>
        
        <div class="sensor-grid">
            <div class="sensor-card">
                <h3>🌡 Température</h3>
                <div class="sensor-value" id="temperature">--</div>
                <div class="sensor-unit">°C</div>
            </div>
            <div class="sensor-card">
                <h3>🧪 TDS</h3>
                <div class="sensor-value" id="tds">--</div>
                <div class="sensor-unit">ppm</div>
            </div>
            <div class="sensor-card">
                <h3>💧 Turbidité</h3>
                <div class="sensor-value" id="turbidity">--</div>
                <div class="sensor-unit">NTU</div>
            </div>
        </div>
        
        <div class="chart-container">
            <canvas id="historyChart"></canvas>
        </div>
        
        <div>
            <button onclick="refreshData()">🔄 Actualiser</button>
            <button onclick="showHistory()">📜 Afficher l'historique</button>
            <button onclick="downloadData()">💾 Télécharger les données</button>
        </div>
        
        <table id="historyTable" style="display: none;">
            <thead>
                <tr>
                    <th>Heure</th>
                    <th>Température (°C)</th>
                    <th>TDS (ppm)</th>
                    <th>Turbidité (NTU)</th>
                </tr>
            </thead>
            <tbody id="historyBody"></tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let historyChart;
        
        function refreshData() {
            fetch("/data")
                .then(response => response.json())
                .then(data => {
                    // Mise à jour des valeurs
                    document.getElementById("temperature").textContent = data.temperature.toFixed(1);
                    document.getElementById("tds").textContent = data.tds;
                    document.getElementById("turbidity").textContent = data.turbidity;
                    
                    // Mise à jour du statut
                    const statusElement = document.getElementById("status");
                    const statusText = document.getElementById("water-status");
                    
                    if (data.pollution) {
                        statusText.textContent = "🚨 EAU POLLUÉE";
                        statusText.style.color = "red";
                        statusElement.classList.add("alert");
                        document.getElementById("status-message").textContent = 
                            "Attention: Les niveaux de pollution sont dangereux!";
                    } else if (data.tds > 300 || data.turbidity > 1000) {
                        statusText.textContent = "⚠️ EAU TROUBLE";
                        statusText.style.color = "orange";
                        statusElement.classList.remove("alert");
                        document.getElementById("status-message").textContent = 
                            "L'eau présente des signes de contamination modérée.";
                    } else {
                        statusText.textContent = "✅ EAU POTABLE";
                        statusText.style.color = "green";
                        statusElement.classList.remove("alert");
                        document.getElementById("status-message").textContent = 
                            "L'eau est de bonne qualité selon les paramètres mesurés.";
                    }
                });
        }
        
        function showHistory() {
            fetch("/history")
                .then(response => response.json())
                .then(data => {
                    const table = document.getElementById("historyTable");
                    const body = document.getElementById("historyBody");
                    body.innerHTML = "";
                    
                    data.forEach(row => {
                        const tr = document.createElement("tr");
                        const date = new Date(row.time * 1000).toLocaleString();
                        tr.innerHTML = `
                            <td>${date}</td>
                            <td>${row.temperature.toFixed(1)}</td>
                            <td>${row.tds}</td>
                            <td>${row.turbidity}</td>
                        `;
                        body.appendChild(tr);
                    });
                    
                    table.style.display = "table";
                    updateChart(data);
                });
        }
        
        function updateChart(data) {
            const ctx = document.getElementById('historyChart').getContext('2d');
            
            if (historyChart) {
                historyChart.destroy();
            }
            
            const labels = data.map(entry => 
                new Date(entry.time * 1000).toLocaleTimeString());
            
            historyChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Température (°C)',
                            data: data.map(entry => entry.temperature),
                            borderColor: 'rgb(255, 99, 132)',
                            backgroundColor: 'rgba(255, 99, 132, 0.1)',
                            tension: 0.1
                        },
                        {
                            label: 'TDS (ppm)',
                            data: data.map(entry => entry.tds),
                            borderColor: 'rgb(54, 162, 235)',
                            backgroundColor: 'rgba(54, 162, 235, 0.1)',
                            tension: 0.1
                        },
                        {
                            label: 'Turbidité (NTU)',
                            data: data.map(entry => entry.turbidity),
                            borderColor: 'rgb(75, 192, 192)',
                            backgroundColor: 'rgba(75, 192, 192, 0.1)',
                            tension: 0.1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Historique des 48 dernières heures'
                        },
                    },
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });
        }
        
        function downloadData() {
            fetch("/history")
                .then(response => response.json())
                .then(data => {
                    let csv = "Heure,Température (°C),TDS (ppm),Turbidité (NTU)\n";
                    
                    data.forEach(row => {
                        const date = new Date(row.time * 1000).toLocaleString();
                        csv += `${date},${row.temperature.toFixed(1)},${row.tds},${row.turbidity}\n`;
                    });
                    
                    const blob = new Blob([csv], { type: 'text/csv' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.setAttribute('hidden', '');
                    a.setAttribute('href', url);
                    a.setAttribute('download', 'qualite_eau_historique.csv');
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                });
        }
        
        // Actualisation automatique toutes les 5 secondes
        setInterval(refreshData, 5000);
        refreshData();
    </script>
</body>

</html>)rawliteral";

// ===================== SETUP =====================
void setup() {
  Serial.begin(115200);
  
  // Initialisations
  EEPROM.begin(4096);
  lcd.init();
  lcd.backlight();
  lcd.print("Initialisation...");
  
  initWiFi();
  initSensors();
  initWebServer();

  Serial.println("Système prêt");
  lcd.clear();
}

// ===================== LOOP =====================
void loop() {
  server.handleClient();
  unsigned long now = millis();

  // Lecture périodique des capteurs
  if (now - lastSensorRead >= SENSOR_INTERVAL) {
    readSensors();
    evaluateWaterQuality();
    updateLCD();
    lastSensorRead = now;
  }

  // Sauvegarde périodique en EEPROM
  if (now - lastDataSave >= SAVE_INTERVAL) {
    saveToEEPROM();
    lastDataSave = now;
  }
}

// ===================== FONCTIONS =====================
void initWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("Connexion WiFi...");
  lcd.setCursor(0, 1);
  lcd.print("WiFi...");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nConnecté! IP: " + WiFi.localIP().toString());
  lcd.setCursor(0, 1);
  lcd.print("IP: " + WiFi.localIP().toString());
}

void initSensors() {
  sensors.begin();
  pinMode(TDS_PIN, INPUT);
  pinMode(TURBIDITY_PIN, INPUT);
}

void initWebServer() {
  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.on("/history", handleHistory);
  server.onNotFound(handleNotFound);
  server.begin();
  Serial.println("Serveur web actif");
}

void readSensors() {
  sensors.requestTemperatures();
  currentData.temperature = sensors.getTempCByIndex(0);
  currentData.tds = analogRead(TDS_PIN);
  currentData.turbidity = analogRead(TURBIDITY_PIN);
  currentData.timestamp = millis() / 1000; // Converti en secondes

  Serial.printf("[Sensors] Temp: %.1f°C | TDS: %d | Turb: %d\n", 
                currentData.temperature, currentData.tds, currentData.turbidity);
}

void evaluateWaterQuality() {
  static bool lastState = false;
  currentData.isPolluted = (currentData.tds > TDS_CLOUDY || currentData.turbidity > TURB_CLOUDY);

  // Envoi d'email si pollution détectée et cooldown respecté
  if (currentData.isPolluted && !lastState && (millis() - lastEmailSent > EMAIL_COOLDOWN)) {
    sendEmailAlert();
    lastEmailSent = millis();
  }
  lastState = currentData.isPolluted;
}

void sendEmailAlert() {
  Serial.println("Préparation de l'email d'alerte...");

  ESP_Mail_Session session;
  session.server.host_name = SMTP_HOST;
  session.server.port = SMTP_PORT;
  session.login.email = AUTHOR_EMAIL;
  session.login.password = AUTHOR_PASSWORD;

  SMTP_Message message;
  message.sender.name = "Water Quality Alert";
  message.sender.email = AUTHOR_EMAIL;
  message.subject = "ALERTE: Pollution détectée";
  message.addRecipient("Admin", RECIPIENT_EMAIL);

  String content = "Une pollution de l'eau a été détectée!\n\n";
  content += "Détails:\n";
  content += "- Température: " + String(currentData.temperature, 1) + "°C\n";
  content += "- TDS: " + String(currentData.tds) + " ppm\n";
  content += "- Turbidité: " + String(currentData.turbidity) + " NTU\n";
  content += "\nTimestamp: " + String(currentData.timestamp);
  
  message.text.content = content.c_str();

  if (!smtp.connect(&session)) {
    Serial.println("Erreur SMTP: " + String(smtp.errorReason()));
    return;
  }

  if (!MailClient.sendMail(&smtp, &message)) {
    Serial.println("Erreur d'envoi: " + String(smtp.errorReason()));
  } else {
    Serial.println("Email envoyé avec succès!");
  }
}

void saveToEEPROM() {
  static int index = 0;
  int address = index * sizeof(SensorData);

  if (address + sizeof(SensorData) > EEPROM_SIZE) {
    index = 0;
    address = 0;
    Serial.println("EEPROM pleine, réécriture...");
  }

  EEPROM.put(address, currentData);
  EEPROM.commit();
  index++;

  Serial.println("Données sauvegardées en EEPROM");
}

void updateLCD() {
  lcd.clear();
  
  // Ligne 1: Statut
  lcd.setCursor(0, 0);
  if (currentData.isPolluted) {
    lcd.print("ALERTE POLLUTION!");
  } else if (currentData.tds > TDS_CLEAN || currentData.turbidity > TURB_CLEAN) {
    lcd.print("Eau trouble");
  } else {
    lcd.print("Eau propre");
  }

  // Ligne 2: Température
  lcd.setCursor(0, 1);
  lcd.print("Temp: ");
  lcd.print(currentData.temperature, 1);
  lcd.print("C");

  // Ligne 3: TDS
  lcd.setCursor(0, 2);
  lcd.print("TDS: ");
  lcd.print(currentData.tds);
  lcd.print(" ppm");

  // Ligne 4: Turbidité
  lcd.setCursor(0, 3);
  lcd.print("Turb: ");
  lcd.print(currentData.turbidity);
  lcd.print(" NTU");
}

// ===================== HANDLERS WEB =====================
void handleRoot() {
  server.send(200, "text/html", indexHTML);
}

void handleData() {
  DynamicJsonDocument doc(256);
  doc["temp"] = currentData.temperature;
  doc["tds"] = currentData.tds;
  doc["turb"] = currentData.turbidity;
  doc["polluted"] = currentData.isPolluted;
  doc["time"] = currentData.timestamp;

  String json;
  serializeJson(doc, json);
  server.send(200, "application/json", json);
}

void handleHistory() {
  DynamicJsonDocument doc(2048);
  JsonArray array = doc.to<JsonArray>();

  for (int i = 0; i < EEPROM_SIZE / sizeof(SensorData); i++) {
    SensorData entry;
    EEPROM.get(i * sizeof(SensorData), entry);
    
    if (entry.timestamp == 0) continue;

    JsonObject obj = array.add<JsonObject>();
    obj["time"] = entry.timestamp;
    obj["temp"] = entry.temperature;
    obj["tds"] = entry.tds;
    obj["turb"] = entry.turbidity;
  }

  String json;
  serializeJson(doc, json);
  server.send(200, "application/json", json);
}

void handleNotFound() {
  server.send(404, "text/plain", "404: Not Found");
}
